type: edu
files:
- name: src/parking/Main.kt
  visible: true
  text: |
    package parking

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output." + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }


    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String): CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my.toLowerCase() != his.toLowerCase()) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size} " +
                        "lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task5Test : StageTest<OutputClue>() {

        override fun generate() = listOf(
                outputCase(
                        """
                            spot_by_color yellow
                            create 4
                            park KA-01-HH-9999 White
                            park KA-01-HH-3672 White
                            park Rs-P-N-21 Red
                            park Rs-P-N-22 Red
                            reg_by_color GREEN
                            reg_by_color WHITE
                            spot_by_color GREEN
                            spot_by_color red
                            spot_by_reg ABC
                            spot_by_reg KA-01-HH-3672
                            spot_by_reg Rs-P-N-21
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Created a parking lot with 4 spots.
                            White car parked in spot 1.
                            White car parked in spot 2.
                            Red car parked in spot 3.
                            Red car parked in spot 4.
                            No cars with color GREEN were found.
                            KA-01-HH-9999, KA-01-HH-3672
                            No cars with color GREEN were found.
                            3, 4
                            No cars with registration number ABC were found.
                            2
                            3
                """.trimAllIndents(),
                        hint = "See example 1."
                ),
                outputCase(
                        """
                            spot_by_color yellow
                            reg_by_color yellow
                            spot_by_reg yellow
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check commands until the parking is created."
                ),
                outputCase(
                        """
                            create 5
                            park A AA
                            park B BB
                            park C BB
                            park D AA
                            park E AA
                            leave 4
                            reg_by_color aa
                            reg_by_color bb
                            reg_by_color zz
                            spot_by_color aa
                            spot_by_color bb
                            spot_by_color zz
                            spot_by_reg A
                            spot_by_reg B
                            spot_by_reg Z
                            exit
                        """.trimAllIndents(),
                        """
                            Created a parking lot with 5 spots.
                            AA car parked in spot 1.
                            BB car parked in spot 2.
                            BB car parked in spot 3.
                            AA car parked in spot 4.
                            AA car parked in spot 5.
                            Spot 4 is free.
                            A, E
                            B, C
                            No cars with color zz were found.
                            1, 5
                            2, 3
                            No cars with color zz were found.
                            1
                            2
                            No cars with registration number Z were found.
                """.trimAllIndents(),
                        isPrivate = true,
                        hint = "Check the case, when the parking is not full."
                )

        )

        override fun check(reply: String, clue: OutputClue): CheckResult {
            return clue.compareLines(reply)
        }
    }
  learner_created: false
- name: lots.txt
  visible: true
  text: |-
    Lot_1 KA-01-HH-1234 Blue
    null
  learner_created: true
- name: src/parking/Enums.kt
  visible: true
  text: |+
    package parking

    enum class Commands {
        CREATE,
        PARK,
        LEAVE,
        STATUS,
        EXIT
    }

  learner_created: true
- name: src/parking/Helpers.kt
  visible: true
  text: |+
    package parking

    val commandsMap = mapOf<String, Commands>(
        "create" to Commands.CREATE,
        "park" to Commands.PARK,
        "leave" to Commands.LEAVE,
        "status" to Commands.STATUS,
        "exit" to Commands.EXIT
    )

    class Car(
        val registrationNum:
               String, val color: String) {

        var spot : Int = 0


        fun printCar() {
            println("Registration: $registrationNum")
            println("Color: $color")
            println("Spot: $spot")
        }
    }

    object ParkingLot {

        private var parkingSpots = mutableListOf<Spot>()

        fun create(numSpot: Int) : String {
            // reset the list
            parkingSpots = mutableListOf<Spot>()

            for (i in 1..numSpot) {
                parkingSpots.add(Spot(name = (i).toString()))
            }

            return "Created a parking lot with $numSpot spots."

        }

        fun park(car: Car) : String {
            if (parkingSpots.isNotEmpty()) {
                for (spot in parkingSpots) {
                    if (spot.space == null) {
                        spot.settle(car)
                        return "${car.color} car parked in spot ${spot.name}."
                    }
                }
                return "Sorry, the parking lot is full."
            } else {
                return "Sorry, a parking lot has not been created."
            }
        }

        fun leave(spot: String) : String {
            if (parkingSpots.isNotEmpty()) {
                val targetSpot = parkingSpots[spot.toInt() - 1]
                if (targetSpot.space != null) {
                    targetSpot.space = null
                    return "Spot ${targetSpot.name} is free."
                } else {
                    return "There is no car in spot ${targetSpot.name}."
                }
            } else {
                return "Sorry, a parking lot has not been created."
            }
        }

        // print all occupied spots
        // spot name, registration number, color
        fun status() : String {
            if (parkingSpots.isNotEmpty()) {
                var output = ""
                for (spot in parkingSpots) {
                    if (spot.space != null) {
                        output += "${spot.name} ${spot.space!!.registrationNum} ${spot.space!!.color}\n"
                    }
                }
                if (output == "") {
                    return "Parking lot is empty."
                } else {
                    return output.substring(0, output.length - 1)
                }
            } else {
                return "Sorry, a parking lot has not been created."
            }
        }
    }

    class Spot(val name: String) {

        var space : Car? = null
        fun settle(car : Car) {
            space = car
        }
        fun printSpot() {
            print("Spot $name: ${space}")

        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/learn/step/6601#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 22 Apr 2023 18:47:51 UTC"
record: -1
